#!/usr/bin/env node
/* eslint-disable no-undef */

import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// ÊûÑÂª∫Ê®°ÂºèÈÖçÁΩÆ
const BUILD_MODES = {
  development: {
    NODE_ENV: 'development',
    sourcemap: true,
    minify: false
  },
  production: {
    NODE_ENV: 'production',
    sourcemap: false,
    minify: true
  },
  analyze: {
    NODE_ENV: 'production',
    ANALYZE: true,
    sourcemap: false,
    minify: true
  },
  pwa: {
    NODE_ENV: 'production',
    PWA: true,
    sourcemap: false,
    minify: true
  }
}

// Ëé∑ÂèñÂëΩ‰ª§Ë°åÂèÇÊï∞
const args = process.argv.slice(2)
const mode = args[0] || 'production'
const config = BUILD_MODES[mode]

if (!config) {
  console.error(`‚ùå Êú™Áü•ÁöÑÊûÑÂª∫Ê®°Âºè: ${mode}`)
  console.log('ÂèØÁî®ÁöÑÊûÑÂª∫Ê®°Âºè:')
  Object.keys(BUILD_MODES).forEach(key => {
    console.log(`  - ${key}`)
  })
  process.exit(1)
}

console.log(`üöÄ ÂºÄÂßãÊûÑÂª∫ (Ê®°Âºè: ${mode})`)
console.log('ÊûÑÂª∫ÈÖçÁΩÆ:', config)

// ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
Object.entries(config).forEach(([key, value]) => {
  process.env[key] = value
})

// Ê∏ÖÁêÜdistÁõÆÂΩï
const distPath = path.join(__dirname, '../dist')
if (fs.existsSync(distPath)) {
  console.log('üßπ Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï...')
  fs.rmSync(distPath, { recursive: true, force: true })
}

try {
  // ÊâßË°åÊûÑÂª∫
  console.log('üì¶ ÂºÄÂßãÊâìÂåÖ...')
  const startTime = Date.now()
  
  execSync('npm run build', {
    stdio: 'inherit',
    env: { ...process.env }
  })
  
  const buildTime = Date.now() - startTime
  console.log(`‚úÖ ÊûÑÂª∫ÂÆåÊàê! ËÄóÊó∂: ${(buildTime / 1000).toFixed(2)}s`)
  
  // ÂàÜÊûêÊûÑÂª∫ÁªìÊûú
  if (fs.existsSync(distPath)) {
    analyzeBuildResult(distPath)
  }
  
  // Â¶ÇÊûúÊòØÂàÜÊûêÊ®°ÂºèÔºåÊâìÂºÄÂàÜÊûêÊä•Âëä
  if (mode === 'analyze') {
    const statsPath = path.join(distPath, 'stats.html')
    if (fs.existsSync(statsPath)) {
      console.log('üìä ÊâìÂåÖÂàÜÊûêÊä•ÂëäÂ∑≤ÁîüÊàê:', statsPath)
    }
  }
  
} catch (error) {
  console.error('‚ùå ÊûÑÂª∫Â§±Ë¥•:', error.message)
  process.exit(1)
}

// ÂàÜÊûêÊûÑÂª∫ÁªìÊûú
function analyzeBuildResult(distPath) {
  console.log('\nüìä ÊûÑÂª∫ÁªìÊûúÂàÜÊûê:')
  
  const files = getAllFiles(distPath)
  const stats = {
    total: 0,
    js: 0,
    css: 0,
    images: 0,
    fonts: 0,
    other: 0
  }
  
  files.forEach(file => {
    const size = fs.statSync(file).size
    stats.total += size
    
    const ext = path.extname(file).toLowerCase()
    if (['.js', '.mjs'].includes(ext)) {
      stats.js += size
    } else if (ext === '.css') {
      stats.css += size
    } else if (['.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp'].includes(ext)) {
      stats.images += size
    } else if (['.woff', '.woff2', '.ttf', '.eot'].includes(ext)) {
      stats.fonts += size
    } else {
      stats.other += size
    }
  })
  
  console.log(`ÊÄªÂ§ßÂ∞è: ${formatSize(stats.total)}`)
  console.log(`JavaScript: ${formatSize(stats.js)} (${((stats.js / stats.total) * 100).toFixed(1)}%)`)
  console.log(`CSS: ${formatSize(stats.css)} (${((stats.css / stats.total) * 100).toFixed(1)}%)`)
  console.log(`ÂõæÁâá: ${formatSize(stats.images)} (${((stats.images / stats.total) * 100).toFixed(1)}%)`)
  console.log(`Â≠ó‰Ωì: ${formatSize(stats.fonts)} (${((stats.fonts / stats.total) * 100).toFixed(1)}%)`)
  console.log(`ÂÖ∂‰ªñ: ${formatSize(stats.other)} (${((stats.other / stats.total) * 100).toFixed(1)}%)`)
  
  // Ê£ÄÊü•Â§ßÊñá‰ª∂
  const largeFiles = files
    .map(file => ({
      path: path.relative(distPath, file),
      size: fs.statSync(file).size
    }))
    .filter(file => file.size > 500 * 1024) // Â§ß‰∫é500KB
    .sort((a, b) => b.size - a.size)
  
  if (largeFiles.length > 0) {
    console.log('\n‚ö†Ô∏è  Â§ßÊñá‰ª∂Ë≠¶Âëä (>500KB):')
    largeFiles.forEach(file => {
      console.log(`  ${file.path}: ${formatSize(file.size)}`)
    })
  }
  
  // ÊÄßËÉΩÂª∫ËÆÆ
  console.log('\nüí° ÊÄßËÉΩÂª∫ËÆÆ:')
  if (stats.js > 1024 * 1024) {
    console.log('  - JavaScriptÊñá‰ª∂ËæÉÂ§ßÔºåËÄÉËôëËøõ‰∏ÄÊ≠•‰ª£Á†ÅÂàÜÂâ≤')
  }
  if (stats.images > 2 * 1024 * 1024) {
    console.log('  - ÂõæÁâáÊñá‰ª∂ËæÉÂ§ßÔºåËÄÉËôëÂéãÁº©Êàñ‰ΩøÁî®WebPÊ†ºÂºè')
  }
  if (stats.total > 5 * 1024 * 1024) {
    console.log('  - ÊÄª‰ΩìÁßØËæÉÂ§ßÔºåËÄÉËôëÂêØÁî®CDNÊàñÊáíÂä†ËΩΩ')
  }
}

// Ëé∑ÂèñÁõÆÂΩï‰∏ãÊâÄÊúâÊñá‰ª∂
function getAllFiles(dir) {
  const files = []
  
  function traverse(currentDir) {
    const items = fs.readdirSync(currentDir)
    
    items.forEach(item => {
      const fullPath = path.join(currentDir, item)
      const stat = fs.statSync(fullPath)
      
      if (stat.isDirectory()) {
        traverse(fullPath)
      } else {
        files.push(fullPath)
      }
    })
  }
  
  traverse(dir)
  return files
}

// Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
function formatSize(bytes) {
  if (bytes === 0) return '0 B'
  
  const k = 1024
  const sizes = ['B', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}